package com.viettel.logger.filter;

import com.viettel.ktts2.common.UDate;
import org.apache.commons.io.IOUtils;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.io.CachedOutputStream;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;
import org.apache.cxf.transport.http.AbstractHTTPDestination;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import viettel.passport.client.UserToken;

import javax.servlet.http.HttpServletRequest;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.Date;

public class LogInInterceptor extends AbstractPhaseInterceptor<Message> implements VtLogInterceptor {
    Logger loggerHieunang = Logger.getLogger("LogHieuNang");
    @Value("${APPLICATION_CODE}")
    private static String APP_CODE;

    public LogInInterceptor() {
        super(Phase.PRE_PROTOCOL);

    }

    public LogInInterceptor(String phase) {
        super(phase);
        // TODO Auto-generated constructor stub
    }

    @Override
    public void handleMessage(Message message) throws Fault {
        // TODO Auto-generated method stub
        HttpServletRequest request2 = (HttpServletRequest)
                message.get(AbstractHTTPDestination.HTTP_REQUEST);
        String loginName = "";
        String remoteIp = "";
        String requestUrI = "";
        String bodyData = "";
        String parrameter = "";
        if (request2 != null) {
            remoteIp = request2.getRemoteAddr();
            message.getExchange().put("REMOTE_IP", remoteIp);
            UserToken token = (UserToken) request2.getSession().getAttribute("vsaUserToken");
            if (token != null) {
                loginName = token.getUserName();
                message.getExchange().put("LOGIN_USER", loginName);
            }
            requestUrI = request2.getPathInfo();
            message.getExchange().put("REQUEST_URI", requestUrI);

            InputStream is = message.getContent(InputStream.class);
            if (is != null) {
                CachedOutputStream bos = new CachedOutputStream();
                try {
                    IOUtils.copy(is, bos);
                    bodyData = new String(bos.getBytes());
                    bos.flush();
                    is.close();
                    InputStream inputStream = new ByteArrayInputStream(bodyData.getBytes());
                    message.setContent(InputStream.class, inputStream);
                    bos.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
            parrameter = request2.getQueryString();
        }
        Date dateStart = Calendar.getInstance().getTime();
        message.getExchange().put(TIME_START, dateStart);
        StringBuilder sb = new StringBuilder();
        sb.append("START_ACTION");
        sb.append("|");
        sb.append(APP_CODE);
        sb.append("|");
        sb.append(UDate.toLogDateFormat(dateStart));
        sb.append("|");
        sb.append(loginName);
        sb.append("|");
        sb.append(remoteIp);
        sb.append("|");
        sb.append(requestUrI);
        sb.append("|");
        sb.append(parrameter);
        sb.append("|");
        sb.append(bodyData);
        sb.append("||||");
        loggerHieunang.info(sb.toString());
    }
}
